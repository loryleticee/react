{"ast":null,"code":"import { store } from \"../\";\nimport { ADD_MESSAGE, LOAD_MESSAGE_PENDING, LOAD_MESSAGE_ERROR, LOAD_MESSAGE_SUCCESS, successMessages, pendingMessages, errorMessages } from \"../actions\";\nimport axios from \"axios\";\nconst URL = \"https://my-json-server.typicode.com/tlenclos/formation-react-fake-server/messages\";\n\nconst INIT_STATE = () => {\n  return axios.get(URL).then(response => {\n    store.dispatch(successMessages(response.data));\n  }).then(response => {\n    store.dispatch(pendingMessages('...chargement'));\n  }).catch(error => {\n    store.dispatch({\n      type: LOAD_MESSAGE_ERROR,\n      message: error\n    });\n  });\n};\n\nexport const messageList = (state = INIT_STATE(), action) => {\n  switch (action.type) {\n    case ADD_MESSAGE:\n      let newState = {\n        username: action.username,\n        message: action.message,\n        sentAt: action.sentAt\n      };\n      return [...state, newState];\n\n    case LOAD_MESSAGE_ERROR:\n      console.log(state);\n      /*const errorState = () => ({\n          username: \"error\",\n          message : action.message,\n          sentAt  : new Date(),\n      });\n      console.log(errorState());\n      return errorState();*/\n\n      return state;\n\n    case LOAD_MESSAGE_PENDING:\n      return [...state, action.message];\n\n    case LOAD_MESSAGE_SUCCESS:\n      state = action.message.map(msg => {\n        return msg;\n      });\n      return state;\n\n    default:\n      console.log(state);\n      return state;\n  }\n};","map":{"version":3,"sources":["/Users/loryleticee/Sites/react/src/reducers/Chat.js"],"names":["store","ADD_MESSAGE","LOAD_MESSAGE_PENDING","LOAD_MESSAGE_ERROR","LOAD_MESSAGE_SUCCESS","successMessages","pendingMessages","errorMessages","axios","URL","INIT_STATE","get","then","response","dispatch","data","catch","error","type","message","messageList","state","action","newState","username","sentAt","console","log","map","msg"],"mappings":"AAAA,SAAQA,KAAR,QAAoB,KAApB;AACA,SACIC,WADJ,EAEIC,oBAFJ,EAGIC,kBAHJ,EAIIC,oBAJJ,EAKIC,eALJ,EAMIC,eANJ,EAOIC,aAPJ,QAQO,YARP;AASA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,MAAMC,GAAG,GAAG,mFAAZ;;AAEA,MAAMC,UAAU,GAAG,MAAM;AAErB,SAAOF,KAAK,CAACG,GAAN,CAAUF,GAAV,EACFG,IADE,CACGC,QAAQ,IAAI;AACdb,IAAAA,KAAK,CAACc,QAAN,CAAeT,eAAe,CAACQ,QAAQ,CAACE,IAAV,CAA9B;AACH,GAHE,EAGAH,IAHA,CAICC,QAAQ,IAAI;AACRb,IAAAA,KAAK,CAACc,QAAN,CAAeR,eAAe,CAAC,eAAD,CAA9B;AACH,GANF,EAQFU,KARE,CAQIC,KAAK,IAAI;AACZjB,IAAAA,KAAK,CAACc,QAAN,CAAe;AAACI,MAAAA,IAAI,EAAEf,kBAAP;AAA2BgB,MAAAA,OAAO,EAACF;AAAnC,KAAf;AACH,GAVE,CAAP;AAYH,CAdD;;AAgBA,OAAO,MAAMG,WAAW,GAAG,CAACC,KAAK,GAAGX,UAAU,EAAnB,EAAuBY,MAAvB,KAAkC;AACzD,UAAQA,MAAM,CAACJ,IAAf;AACI,SAAKjB,WAAL;AACI,UAAIsB,QAAQ,GAAG;AACXC,QAAAA,QAAQ,EAAEF,MAAM,CAACE,QADN;AAEXL,QAAAA,OAAO,EAAGG,MAAM,CAACH,OAFN;AAGXM,QAAAA,MAAM,EAAIH,MAAM,CAACG;AAHN,OAAf;AAMA,aAAO,CAAC,GAAGJ,KAAJ,EAAWE,QAAX,CAAP;;AAEJ,SAAKpB,kBAAL;AACIuB,MAAAA,OAAO,CAACC,GAAR,CAAYN,KAAZ;AACA;;;;;;;;AAOA,aAAOA,KAAP;;AAEJ,SAAKnB,oBAAL;AACI,aAAO,CAAC,GAAGmB,KAAJ,EAAWC,MAAM,CAACH,OAAlB,CAAP;;AAEJ,SAAKf,oBAAL;AACIiB,MAAAA,KAAK,GAAGC,MAAM,CAACH,OAAP,CAAeS,GAAf,CAAqBC,GAAD,IAAQ;AACjC,eAAOA,GAAP;AACF,OAFO,CAAR;AAGA,aAAOR,KAAP;;AAEJ;AACIK,MAAAA,OAAO,CAACC,GAAR,CAAYN,KAAZ;AACA,aAAOA,KAAP;AAhCR;AAkCH,CAnCM","sourcesContent":["import {store} from \"../\";\nimport {\n    ADD_MESSAGE,\n    LOAD_MESSAGE_PENDING,\n    LOAD_MESSAGE_ERROR,\n    LOAD_MESSAGE_SUCCESS,\n    successMessages,\n    pendingMessages,\n    errorMessages,\n} from \"../actions\";\nimport axios from \"axios\";\n\nconst URL = \"https://my-json-server.typicode.com/tlenclos/formation-react-fake-server/messages\";\n\nconst INIT_STATE = () => {\n\n    return axios.get(URL)\n        .then(response => {\n            store.dispatch(successMessages(response.data));\n        }).then(\n            response => {\n                store.dispatch(pendingMessages('...chargement'));\n            }\n        )\n        .catch(error => {\n            store.dispatch({type :LOAD_MESSAGE_ERROR, message:error});\n        })\n\n};\n\nexport const messageList = (state = INIT_STATE(), action) => {\n    switch (action.type) {\n        case ADD_MESSAGE :\n            let newState = {\n                username: action.username,\n                message : action.message,\n                sentAt  : action.sentAt,\n            };\n\n            return [...state, newState];\n\n        case LOAD_MESSAGE_ERROR :\n            console.log(state);\n            /*const errorState = () => ({\n                username: \"error\",\n                message : action.message,\n                sentAt  : new Date(),\n            });\n            console.log(errorState());\n            return errorState();*/\n            return state;\n\n        case LOAD_MESSAGE_PENDING :\n            return [...state, action.message];\n\n        case LOAD_MESSAGE_SUCCESS :\n            state = action.message.map( (msg) =>{\n               return msg\n            });\n            return state;\n\n        default :\n            console.log(state)\n            return state;\n    }\n};"]},"metadata":{},"sourceType":"module"}