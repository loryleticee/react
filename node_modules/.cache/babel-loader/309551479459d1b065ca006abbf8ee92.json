{"ast":null,"code":"import { useDispatch, useSelector } from \"react-redux\";\nimport axios from 'axios';\nimport { ws } from \"../services/websocket\";\nimport { store } from \"../index\";\nconst URL = \"https://my-json-server.typicode.com/tlenclos/formation-react-fake-server/messages\";\nlet nextIdMessage = 0;\nexport const ADD_MESSAGE = \"ADD_MESSAGE\";\nexport const LOAD_MESSAGE_PENDING = \"LOAD_MESSAGE_PENDING\";\nexport const LOAD_MESSAGE_SUCCESS = \"LOAD_MESSAGE_SUCCESS\";\nexport const LOAD_MESSAGE_ERROR = \"LOAD_MESSAGE_ERROR\";\nexport const LOG_USER = \"LOG_USER\";\nexport const logUser = username => ({\n  type: LOG_USER,\n  username\n});\nexport const addMessage = message => {\n  const action = {\n    type: ADD_MESSAGE,\n    message: message.message,\n    username: message.username,\n    sentAt: new Date()\n  };\n  ws.send(JSON.stringify(action));\n  return action;\n};\nexport const loadMessagePending = () => {\n  return async () => {\n    let response = await axios.get(URL).then(message => store.dispatch(addMessage(response))).catch(error => dispatch({}));\n  };\n};\n/*\nexport const loadMessageSucces = (message, username) => ({\n    type    : LOAD_MESSAGE_SUCCESS,\n    key     : nextIdMessage++,\n    username,\n    message,\n});\n\nexport const loadMessageError = (message, username) => ({\n    type    : LOAD_MESSAGE_ERROR,\n    key     : nextIdMessage++,\n    username,\n    message,\n});\n */","map":{"version":3,"sources":["/Users/loryleticee/Sites/react/src/actions/index.js"],"names":["useDispatch","useSelector","axios","ws","store","URL","nextIdMessage","ADD_MESSAGE","LOAD_MESSAGE_PENDING","LOAD_MESSAGE_SUCCESS","LOAD_MESSAGE_ERROR","LOG_USER","logUser","username","type","addMessage","message","action","sentAt","Date","send","JSON","stringify","loadMessagePending","response","get","then","dispatch","catch","error"],"mappings":"AAAA,SAAQA,WAAR,EAAqBC,WAArB,QAAuC,aAAvC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAAQC,EAAR,QAAiB,uBAAjB;AACA,SAAQC,KAAR,QAAoB,UAApB;AAEA,MAAMC,GAAG,GAAG,mFAAZ;AAEA,IAAIC,aAAa,GAAG,CAApB;AAEA,OAAO,MAAMC,WAAW,GAAc,aAA/B;AACP,OAAO,MAAMC,oBAAoB,GAAK,sBAA/B;AACP,OAAO,MAAMC,oBAAoB,GAAK,sBAA/B;AACP,OAAO,MAAMC,kBAAkB,GAAO,oBAA/B;AACP,OAAO,MAAMC,QAAQ,GAAiB,UAA/B;AAIP,OAAO,MAAMC,OAAO,GAAIC,QAAD,KAAe;AAClCC,EAAAA,IAAI,EAAMH,QADwB;AAElCE,EAAAA;AAFkC,CAAf,CAAhB;AAKP,OAAO,MAAME,UAAU,GAAIC,OAAD,IAAa;AACnC,QAAMC,MAAM,GAAG;AACXH,IAAAA,IAAI,EAAUP,WADH;AAEXS,IAAAA,OAAO,EAAOA,OAAO,CAACA,OAFX;AAGXH,IAAAA,QAAQ,EAAMG,OAAO,CAACH,QAHX;AAIXK,IAAAA,MAAM,EAAQ,IAAIC,IAAJ;AAJH,GAAf;AAMAhB,EAAAA,EAAE,CAACiB,IAAH,CAAQC,IAAI,CAACC,SAAL,CAAeL,MAAf,CAAR;AAEA,SAAOA,MAAP;AACH,CAVM;AAYP,OAAO,MAAMM,kBAAkB,GAAG,MAAM;AACpC,SAAO,YAAY;AACf,QAAIC,QAAQ,GAAG,MAAMtB,KAAK,CAACuB,GAAN,CAAUpB,GAAV,EAAeqB,IAAf,CACjBV,OAAO,IAAIZ,KAAK,CAACuB,QAAN,CAAeZ,UAAU,CAACS,QAAD,CAAzB,CADM,EAGhBI,KAHgB,CAGVC,KAAK,IAAIF,QAAQ,CAAC,EAAD,CAHP,CAArB;AAIH,GALD;AAMH,CAPM;AASP","sourcesContent":["import {useDispatch, useSelector} from \"react-redux\";\nimport axios from 'axios';\nimport {ws} from \"../services/websocket\";\nimport {store} from \"../index\";\n\nconst URL = \"https://my-json-server.typicode.com/tlenclos/formation-react-fake-server/messages\";\n\nlet nextIdMessage = 0;\n\nexport const ADD_MESSAGE            = \"ADD_MESSAGE\";\nexport const LOAD_MESSAGE_PENDING   = \"LOAD_MESSAGE_PENDING\";\nexport const LOAD_MESSAGE_SUCCESS   = \"LOAD_MESSAGE_SUCCESS\";\nexport const LOAD_MESSAGE_ERROR     = \"LOAD_MESSAGE_ERROR\";\nexport const LOG_USER               = \"LOG_USER\";\n\n\n\nexport const logUser = (username) => ({\n    type    : LOG_USER,\n    username,\n});\n\nexport const addMessage = (message) => {\n    const action = {\n        type        : ADD_MESSAGE,\n        message     : message.message,\n        username    : message.username,\n        sentAt      : new Date(),\n    };\n    ws.send(JSON.stringify(action));\n\n    return action;\n};\n\nexport const loadMessagePending = () => {\n    return async () => {\n        let response = await axios.get(URL).then(\n            message => store.dispatch(addMessage(response))\n        )\n            .catch(error => dispatch({}))\n    }\n};\n\n/*\nexport const loadMessageSucces = (message, username) => ({\n    type    : LOAD_MESSAGE_SUCCESS,\n    key     : nextIdMessage++,\n    username,\n    message,\n});\n\nexport const loadMessageError = (message, username) => ({\n    type    : LOAD_MESSAGE_ERROR,\n    key     : nextIdMessage++,\n    username,\n    message,\n});\n */"]},"metadata":{},"sourceType":"module"}