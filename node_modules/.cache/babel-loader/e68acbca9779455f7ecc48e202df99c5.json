{"ast":null,"code":"import { store } from \"../\";\nimport { ADD_MESSAGE, LOAD_MESSAGE_PENDING, LOAD_MESSAGE_ERROR, LOAD_MESSAGE_SUCCESS } from \"../actions\";\nimport axios from \"axios\";\nconst URL = \"https://my-json-server.typicode.com/tlenclos/formation-react-fake-server/messages\";\n\nconst INIT_STATE = () => {\n  return axios.get(URL).then(response => {\n    store.dispatch({\n      type: LOAD_MESSAGE_SUCCESS,\n      message: response.data\n    });\n  }).then(response => {\n    store.dispatch({\n      type: LOAD_MESSAGE_PENDING,\n      message: '...chargement'\n    });\n  }).catch(error => {\n    store.dispatch({\n      type: LOAD_MESSAGE_ERROR,\n      message: error\n    });\n  });\n};\n\nexport const messageList = (state = INIT_STATE(), action) => {\n  switch (action.type) {\n    case ADD_MESSAGE:\n      let newState = {\n        username: action.username,\n        message: action.message,\n        sentAt: action.sentAt\n      };\n      return [...state, newState];\n\n    case LOAD_MESSAGE_ERROR:\n      let errorState = {\n        username: \"\",\n        message: action.message,\n        sentAt: new Date()\n      };\n      return [...state, errorState];\n\n    case LOAD_MESSAGE_PENDING:\n      return [...state, action.message];\n\n    case LOAD_MESSAGE_SUCCESS:\n      state = action.message.map(msg => {\n        return msg;\n      });\n      return state;\n\n    default:\n      return state;\n  }\n};","map":{"version":3,"sources":["/Users/loryleticee/Sites/react/src/reducers/Chat.js"],"names":["store","ADD_MESSAGE","LOAD_MESSAGE_PENDING","LOAD_MESSAGE_ERROR","LOAD_MESSAGE_SUCCESS","axios","URL","INIT_STATE","get","then","response","dispatch","type","message","data","catch","error","messageList","state","action","newState","username","sentAt","errorState","Date","map","msg"],"mappings":"AAAA,SAAQA,KAAR,QAAoB,KAApB;AACA,SACIC,WADJ,EAEIC,oBAFJ,EAGIC,kBAHJ,EAIIC,oBAJJ,QAKO,YALP;AAMA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,MAAMC,GAAG,GAAG,mFAAZ;;AAEA,MAAMC,UAAU,GAAG,MAAM;AACrB,SAAOF,KAAK,CAACG,GAAN,CAAUF,GAAV,EACFG,IADE,CACGC,QAAQ,IAAI;AACdV,IAAAA,KAAK,CAACW,QAAN,CAAe;AAACC,MAAAA,IAAI,EAAGR,oBAAR;AAA+BS,MAAAA,OAAO,EAAEH,QAAQ,CAACI;AAAjD,KAAf;AACH,GAHE,EAGAL,IAHA,CAICC,QAAQ,IAAI;AACRV,IAAAA,KAAK,CAACW,QAAN,CAAe;AAACC,MAAAA,IAAI,EAAGV,oBAAR;AAA+BW,MAAAA,OAAO,EAAE;AAAxC,KAAf;AACH,GANF,EAQFE,KARE,CAQIC,KAAK,IAAI;AACZhB,IAAAA,KAAK,CAACW,QAAN,CAAe;AAACC,MAAAA,IAAI,EAAGT,kBAAR;AAA6BU,MAAAA,OAAO,EAAEG;AAAtC,KAAf;AACH,GAVE,CAAP;AAWH,CAZD;;AAcA,OAAO,MAAMC,WAAW,GAAG,CAACC,KAAK,GAAGX,UAAU,EAAnB,EAAuBY,MAAvB,KAAkC;AACzD,UAAQA,MAAM,CAACP,IAAf;AACI,SAAKX,WAAL;AACI,UAAImB,QAAQ,GAAG;AACXC,QAAAA,QAAQ,EAAEF,MAAM,CAACE,QADN;AAEXR,QAAAA,OAAO,EAAGM,MAAM,CAACN,OAFN;AAGXS,QAAAA,MAAM,EAAIH,MAAM,CAACG;AAHN,OAAf;AAMA,aAAO,CAAC,GAAGJ,KAAJ,EAAWE,QAAX,CAAP;;AAEJ,SAAKjB,kBAAL;AACI,UAAIoB,UAAU,GAAG;AACbF,QAAAA,QAAQ,EAAE,EADG;AAEbR,QAAAA,OAAO,EAAGM,MAAM,CAACN,OAFJ;AAGbS,QAAAA,MAAM,EAAI,IAAIE,IAAJ;AAHG,OAAjB;AAMA,aAAO,CAAC,GAAGN,KAAJ,EAAWK,UAAX,CAAP;;AAEJ,SAAKrB,oBAAL;AACI,aAAO,CAAC,GAAGgB,KAAJ,EAAWC,MAAM,CAACN,OAAlB,CAAP;;AAEJ,SAAKT,oBAAL;AACIc,MAAAA,KAAK,GAAGC,MAAM,CAACN,OAAP,CAAeY,GAAf,CAAqBC,GAAD,IAAQ;AACjC,eAAOA,GAAP;AACF,OAFO,CAAR;AAIA,aAAOR,KAAP;;AAEJ;AACI,aAAOA,KAAP;AA9BR;AAgCH,CAjCM","sourcesContent":["import {store} from \"../\";\nimport {\n    ADD_MESSAGE,\n    LOAD_MESSAGE_PENDING,\n    LOAD_MESSAGE_ERROR,\n    LOAD_MESSAGE_SUCCESS,\n} from \"../actions\";\nimport axios from \"axios\";\n\nconst URL = \"https://my-json-server.typicode.com/tlenclos/formation-react-fake-server/messages\";\n\nconst INIT_STATE = () => {\n    return axios.get(URL)\n        .then(response => {\n            store.dispatch({type : LOAD_MESSAGE_SUCCESS , message :response.data});\n        }).then(\n            response => {\n                store.dispatch({type : LOAD_MESSAGE_PENDING , message :'...chargement'});\n            }\n        )\n        .catch(error => {\n            store.dispatch({type : LOAD_MESSAGE_ERROR , message :error});\n        })\n};\n\nexport const messageList = (state = INIT_STATE(), action) => {\n    switch (action.type) {\n        case ADD_MESSAGE :\n            let newState = {\n                username: action.username,\n                message : action.message,\n                sentAt  : action.sentAt,\n            };\n\n            return [...state, newState];\n\n        case LOAD_MESSAGE_ERROR :\n            let errorState = {\n                username: \"\",\n                message : action.message,\n                sentAt  : new Date(),\n            };\n\n            return [...state, errorState];\n\n        case LOAD_MESSAGE_PENDING :\n            return [...state, action.message];\n\n        case LOAD_MESSAGE_SUCCESS :\n            state = action.message.map( (msg) =>{\n               return msg\n            });\n\n            return state;\n\n        default :\n            return state;\n    }\n};"]},"metadata":{},"sourceType":"module"}